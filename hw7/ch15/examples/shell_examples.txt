CHAPTER 15 SHELL EXAMPLES
Cate Lukner

In [8]: import PyPDF2

In [9]: cd ~/Documents/Github/csc221/hw7/ch15/examples
C:\Users\catlu\Documents\Github\csc221\hw7\ch15\examples

In [10]: pdfFileObj = open('meetingminutes.pdf', 'rb')

In [11]: pdfReader = PyPDF2.PdfFileReader(pdfFileObj)

In [12]: pdfReader.numPages
Out[12]: 19

In [13]: pageObj = pdfReader.getPage(0)

In [14]: pageObj.extractText()
Out[14]: 'OOFFFFIICCIIAALL  BBOOAARRDD  MMIINNUUTTEESS   Meeting of \nMarch 7\n, 2014\n        \n     The Board of Elementary and Secondary Education shall provide leadership and \ncreate policies for education that expand opportunities for children, empower \nfamilies and communities, and advance Louisiana in an increasingly \ncompetitive glob\nal market.\n BOARD \n of ELEMENTARY\n and \n SECONDARY\n EDUCATION\n  '

In [15]: pdfFile.Obj.close()
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-15-15f7474d34de> in <module>()
----> 1 pdfFile.Obj.close()

NameError: name 'pdfFile' is not defined

In [16]: pdfFileObj.close()

In [24]: pdfReader = PyPDF2.PdfFileReader(open('encrypted.pdf', 'rb'))

In [25]: pdfReader.isEncrypted
Out[25]: True

In [26]: pdfReader.getPage(0)
---------------------------------------------------------------------------
PdfReadError                              Traceback (most recent call last)
<ipython-input-26-dbdbde728831> in <module>()
----> 1 pdfReader.getPage(0)

c:\users\catlu\appdata\local\programs\python\python37-32\lib\site-packages\PyPDF2\pdf.py in getPage(self, pageNumber)
   1174         #assert not self.trailer.has_key("/Encrypt")
   1175         if self.flattenedPages == None:
-> 1176             self._flatten()
   1177         return self.flattenedPages[pageNumber]
   1178

c:\users\catlu\appdata\local\programs\python\python37-32\lib\site-packages\PyPDF2\pdf.py in _flatten(self, pages, inherit, indirectRef)
   1503         if pages == None:
   1504             self.flattenedPages = []
-> 1505             catalog = self.trailer["/Root"].getObject()
   1506             pages = catalog["/Pages"].getObject()
   1507

c:\users\catlu\appdata\local\programs\python\python37-32\lib\site-packages\PyPDF2\generic.py in __getitem__(self, key)
    514
    515     def __getitem__(self, key):
--> 516         return dict.__getitem__(self, key).getObject()
    517
    518     ##

c:\users\catlu\appdata\local\programs\python\python37-32\lib\site-packages\PyPDF2\generic.py in getObject(self)
    176
    177     def getObject(self):
--> 178         return self.pdf.getObject(self).getObject()
    179
    180     def __repr__(self):

c:\users\catlu\appdata\local\programs\python\python37-32\lib\site-packages\PyPDF2\pdf.py in getObject(self, indirectReference)
   1615                 # if we don't have the encryption key:
   1616                 if not hasattr(self, '_decryption_key'):
-> 1617                     raise utils.PdfReadError("file has not been decrypted")
   1618                 # otherwise, decrypt here...
   1619                 import struct

PdfReadError: file has not been decrypted

In [27]: pdfReader.decrypt('rosebud')
Out[27]: 1

In [24]: pdfReader = PyPDF2.PdfFileReader(open('encrypted.pdf', 'rb'))

In [25]: pdfReader.isEncrypted
Out[25]: True

In [26]: pdfReader.getPage(0)
---------------------------------------------------------------------------
PdfReadError                              Traceback (most recent call last)
<ipython-input-26-dbdbde728831> in <module>()
----> 1 pdfReader.getPage(0)

c:\users\catlu\appdata\local\programs\python\python37-32\lib\site-packages\PyPDF2\pdf.py in getPage(self, pageNumber)
   1174         #assert not self.trailer.has_key("/Encrypt")
   1175         if self.flattenedPages == None:
-> 1176             self._flatten()
   1177         return self.flattenedPages[pageNumber]
   1178

c:\users\catlu\appdata\local\programs\python\python37-32\lib\site-packages\PyPDF2\pdf.py in _flatten(self, pages, inherit, indirectRef)
   1503         if pages == None:
   1504             self.flattenedPages = []
-> 1505             catalog = self.trailer["/Root"].getObject()
   1506             pages = catalog["/Pages"].getObject()
   1507

c:\users\catlu\appdata\local\programs\python\python37-32\lib\site-packages\PyPDF2\generic.py in __getitem__(self, key)
    514
    515     def __getitem__(self, key):
--> 516         return dict.__getitem__(self, key).getObject()
    517
    518     ##

c:\users\catlu\appdata\local\programs\python\python37-32\lib\site-packages\PyPDF2\generic.py in getObject(self)
    176
    177     def getObject(self):
--> 178         return self.pdf.getObject(self).getObject()
    179
    180     def __repr__(self):

c:\users\catlu\appdata\local\programs\python\python37-32\lib\site-packages\PyPDF2\pdf.py in getObject(self, indirectReference)
   1615                 # if we don't have the encryption key:
   1616                 if not hasattr(self, '_decryption_key'):
-> 1617                     raise utils.PdfReadError("file has not been decrypted")
   1618                 # otherwise, decrypt here...
   1619                 import struct

PdfReadError: file has not been decrypted

In [27]: pdfReader.decrypt('rosebud')
Out[27]: 1

In [28]: pageObj = pdfReader.getPage(0)n [28]: pageObj = pdfReader.getPage(0)

In [32]: pdf1File = open('meetingminutes.pdf', 'rb')

In [33]: pdf2File = open('meetingminutes2.pdf', 'rb')

In [34]: pdf1Reader = PyPDF2.PdfFileReader(pdf1File)

In [35]: pdf2Reader = pyPDF2.PdfFileReader(pdf2File)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-35-2d4d25dd3f01> in <module>()
----> 1 pdf2Reader = pyPDF2.PdfFileReader(pdf2File)

NameError: name 'pyPDF2' is not defined

In [36]: pdf2Reader = PyPDF2.PdfFileReader(pdf2File)

In [37]: pdfWriter = PyPDF2.PdFileWriter()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-37-bf4a43a9e9b2> in <module>()
----> 1 pdfWriter = PyPDF2.PdFileWriter()

AttributeError: module 'PyPDF2' has no attribute 'PdFileWriter'

In [38]: pdfWriter = PyPDF2.PdfFileWriter()

In [39]: for pageNum in range(pdf1Reader.numPages):
    ...:     pageObj = pdf1Reader.getPage(pageNum)
    ...:     pdfWriter.addPage(pageObj)
    ...:

In [40]: for pageNum in range(pdf2Reader.numPages):
    ...:     pageObj = pdf2Reader.getPage(pageNum)
    ...:     pdfWriter.addPage(pageObj)
    ...:

In [41]: pdfOutputFile = open('combinedminutes.pdf', 'wb')

In [42]: pdfWriter.write(pdfOutputFile)

In [43]: pdfOutputFile.close()

In [44]: pdf1File.close()

In [45]: pdf2File.close()

In [46]: import PyPDF2

In [47]: minutesFile = open('meetingminutes.pdf', 'rb')

In [48]: pdfReader = PyPDF2.PdfFileReader(minutesFile)

In [49]: page = pdfReader.getPage(0)

In [50]: page.rotateClockwise(90)
Out[50]:
{'/Contents': [IndirectObject(961, 0),
  IndirectObject(962, 0),
  IndirectObject(963, 0),
  IndirectObject(964, 0),
  IndirectObject(965, 0),
  IndirectObject(966, 0),
  IndirectObject(967, 0),
  IndirectObject(968, 0)],
 '/CropBox': [0, 0, 612, 792],
 '/MediaBox': [0, 0, 612, 792],
--SNIP --
    '/Type': '/XObject',
    '/Width': 309}}},
 '/Rotate': 90,
 '/StructParents': 0,
 '/Type': '/Page'}

In [51]: pdfWriter = PyPDF2.PdfFileWriter()

In [52]: pdfWriter.addPage(page)

In [53]: resultPdfFile = open('rotatedPage.pdf', 'wb')

In [54]: pdfWriter.write(resultPdfFile)

In [55]: resultPdfFile.close()

In [56]: minutesFile.close()

In [58]: minutesFile = open('meetingminutes.pdf', 'rb')

In [59]: pdfReader = PyPDF2.PdfFileReader(minutesFile)

In [60]: minutesFirstPage = pdfReader.getPage(0)

In [61]: pdfWatermarkReader = PyPDF2.PdfFileReader(open('watermark.pdf', 'rb'))

In [62]: minutesFirstPage.mergePage(pdfWatermarkReader.getPage(0))

In [63]: pdfWriter = PyPDF2.PdfFileWriter()

In [64]: pdfWriter.addPage(minutesFirstPage)

In [65]: for pageNum in range(1, pdfReader.numPages):
    ...:     pageObj = pdfReader.getPage(pageNum)
    ...:     pdfWriter.addPage(pageObj)
    ...:

In [66]: resultPdfFile = open('watermarkedCover.pdf', 'wb')

In [67]: pdfWriter.write(resultPdfFile)

In [68]: minutesFile.close()

In [69]: resultPdfFile.close()

In [70]: import PyPDF2

In [71]: pdfFile = open('meetingminutes.pdf', 'rb')

In [72]: pdfReader = PyPDF2.PdfFileReader(pdfFile)

In [73]: pdfWriter = PyPDF2.PdfFileWriter()

In [74]: for pageNum in range(pdfReader.numPages):
    ...:     pdfWriter.addPage(pdfReader.getPage(pageNum))
    ...:

In [75]: pdfWriter.encrypt('swordfish')

In [76]: resultPdf = open('encryptedminutes.pdf', 'wb')

In [77]: pdfWriter.write(resultPdf)

In [78]: resultPdf.close()

In [79]: import docx

In [80]: doc = docx.Document('demo.docx')

In [81]: len(doc.paragraphs)
Out[81]: 7

In [82]: doc.paragraphs[0].text
Out[82]: 'Document Title'

In [83]: doc.paragraphs[1].text
Out[83]: 'A plain paragraph with some bold and some italic'

In [84]: len(doc.paragraphs[1].runs)
Out[84]: 5

In [85]: doc.paragraphs[1].runs[0].text
Out[85]: 'A plain paragraph with'

In [86]: doc.paragraphs[1].runs[1].text
Out[86]: ' some '

In [87]: doc.paragraphs[1].runs[3].text
Out[87]: ' and some '

In [88]: doc.paragraphs[1].runs[4].text
Out[88]: 'italic'

In [92]: import readDocx

In [93]: print(readDocx.getText('demo.docx'))
Document Title
A plain paragraph with some bold and some italic
Heading, level 1
Intense quote
first item in unordered list
first item in ordered list

In [95]: import docx

In [96]: doc = docx.Document('demo.docx')

In [97]: doc.paragraphs[0].text
Out[97]: 'Document Title'

In [98]: doc.paragraphs[0].style
Out[98]: _ParagraphStyle('Title') id: 80284080

In [99]: doc.paragraphs[0].style = 'Normal'

In [100]: doc.paragraphs[0].text
Out[100]: 'Document Title'

In [101]: doc.paragraphs[1].text
Out[101]: 'A plain paragraph with some bold and some italic'

In [102]: (doc.paragraphs[1].runs[0].txt, doc.paragraphs[1].runs[1].text, doc.para
     ...: graphs[1].runs[2].text, doc.paragraphs[1].runs[3].text)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-102-893fecdeba44> in <module>()
----> 1 (doc.paragraphs[1].runs[0].txt, doc.paragraphs[1].runs[1].text, doc.paragraphs[1].runs[2].text, doc.paragraphs[1].runs[3].text)

AttributeError: 'Run' object has no attribute 'txt'

In [103]: (doc.paragraphs[1].runs[0].text, doc.paragraphs[1].runs[1].text, doc.par
     ...: agraphs[1].runs[2].text, doc.paragraphs[1].runs[3].text)
Out[103]: ('A plain paragraph with', ' some ', 'bold', ' and some ')

In [104]: doc.paragraphs[1].runs[0].style = 'QuoteChar'
UserWarning: style lookup by style_id is deprecated. Use style name as key instead. [styles.py:139]

In [105]: doc.paragraphs[1].runs[0].underline = True

In [106]: doc.paragraphs[1].runs[1].underline = True

In [107]: doc.paragraphs[1].runs[3].underline = True

In [108]: doc.paragraphs[1].runs[0].underline = False

In [109]: doc.save('restyled.docs')

IIn [111]: doc = docx.Document()

In [112]: doc.add_paragraph('Hello, world!')
Out[112]: <docx.text.paragraph.Paragraph at 0x4de8350>

In [113]: doc.save('helloworld.docx')

In [114]: doc = docx.Document()

In [115]: doc.add_paragraph('Hello, world!')
Out[115]: <docx.text.paragraph.Paragraph at 0x4df07d0>

In [116]: paraObj1 = doc.add_paragraph('This is a second paragraph.')

In [117]: paraObj2 = doc.add_paragraph('This is yet another paragraph.')

In [118]: paraObj1.add_run('This text is being added to the second paragraph.'
     ...: )
Out[118]: <docx.text.run.Run at 0x4de8890>

In [119]: doc.save('multipleParagraphs.docx')n [111]: doc = docx.Document()

In [112]: doc.add_paragraph('Hello, world!')
Out[112]: <docx.text.paragraph.Paragraph at 0x4de8350>

In [113]: doc.save('helloworld.docx')

In [114]: doc = docx.Document()

In [115]: doc.add_paragraph('Hello, world!')
Out[115]: <docx.text.paragraph.Paragraph at 0x4df07d0>

In [116]: paraObj1 = doc.add_paragraph('This is a second paragraph.')

In [117]: paraObj2 = doc.add_paragraph('This is yet another paragraph.')

In [118]: paraObj1.add_run('This text is being added to the second paragraph.'
     ...: )
Out[118]: <docx.text.run.Run at 0x4de8890>

In [119]: doc.save('multipleParagraphs.docx')

In [120]: doc = docx.Document()

In [121]: doc.add_heading('Header 0', 0)
Out[121]: <docx.text.paragraph.Paragraph at 0x4f69790>

In [122]: doc.add_heading('Header 1', 1)
Out[122]: <docx.text.paragraph.Paragraph at 0x4dfdaf0>

In [123]: doc.add_heading('Header 2', 2)
Out[123]: <docx.text.paragraph.Paragraph at 0x4dfd0f0>

In [124]: doc.add_heading('Header 3', 3)
Out[124]: <docx.text.paragraph.Paragraph at 0x4dfd590>

In [125]: doc.add_heading('Header 4', 4)
Out[125]: <docx.text.paragraph.Paragraph at 0x4dfdcd0>

In [126]: doc.save('headings.docx')

In [127]: pwd
Out[127]: 'C:\\Users\\catlu\\Documents\\Github\\csc221\\hw7\\ch15\\examples'

In [128]: doc = docx.Document()

In [129]: doc.add_paragraph('This is on the first page!')
Out[129]: <docx.text.paragraph.Paragraph at 0x4dfde90>

In [130]: doc.paragraphs[0].runs[0].add_break(docx.enum.text.WD_BREAK.PAGE)

In [131]: doc.add_paragraph(
     ...: 'This is on the second page!')
Out[131]: <docx.text.paragraph.Paragraph at 0x4cb3910>

In [132]: doc.save('twoPage.docx')

In [133]: doc = docx.Document()

In [134]: doc.add_picture('zophie.png', width=docx.shared.Inches(1), height=docx.s
     ...: hared.Cm(4))
Out[134]: <docx.shape.InlineShape at 0x4f73df0>

In [135]: doc.save('zophie.docx')


